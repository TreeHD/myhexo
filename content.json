{"pages":[],"posts":[{"title":"FirstPost","text":"oh ya!終於第一次的脫離懶惰 開始用hexo寫文章啦?也快過農曆新年了主要是想記錄一些生活上碰到的破事(? 又或者是一些技術上的問題","link":"/2021/01/20/FirstPost/"},{"title":"RouterOS 多撥PPPOE HairpinNAT(LoopbackNAT) 實戰","text":"RouterOS多撥情況下 上不了網 可真難搞….朋友最近在家整理RouterOS環境,碰到了一點大問題 你在家連上WiFI後,想打開你珍藏已久的4K@144的影片,卻發現 沒辦法正常連上NAS.. 但是打開4G後 卻可以正常連上NAS,但又因為速度太慢,而完全等轉圈圈 這就是一個 BIG PROBLEM 所以來記錄一下 怎麼幫他解決的 環境如下 Hinet 1G/600M RouterOS一台 Synology NAS一台 復現問題因為是PPPOE多撥情況下 你在同一台ROS以PPPOE方式 獲得了A,B兩個公網IP 你用A公網IP 做WIFI上網 你的NAS服務跑在B公網IP上 A 會沒辦法正常訪問 B 於是你打開 tracert 打算追蹤他怎麼跑的 這時 你會看到這麼個詭異現象 我是在tracert自己嗎…… 這是因為 當你用A IP 訪問出去時 會需要透過路由器 而路由器本身綁定了 你的上網IP 以及 NAS所使用的IP 所以 第一跳就會是自己 解決方法首先 你會需要大概知道甚麼是LoopbackNAT 接下來 你會需要建立一條Destnation NAT 讓你的路由器知道 如果內網去訪問 NAS外網 IP時 要怎麼去跑 設定大致如下 Chain: dstnat Dst. Address: 你的NAS 外網IP Action:dstnat To Address: 你的NAS內網IP To Ports: 按需填入 Comment: NAT Loopback pppoe-out01 很重要 一定要填!!! (名字不可重複,多個的話 要改名) 最後點 OK 就完成啦浮動IP?今天,如果你是很摳的人 你不想因為如此 就把固定IP給NAS占用,怎麼辦 浮動IP 會因為中華電信三天重播一次PPPOE而導致改變 怎麼辦? 試試腳本的加持吧…. 1234567891011121314#輸入PPPOE連線名稱:local iwan &quot;pppoe-out01&quot; # 之前配置的回流規則的註釋 那個很重要的(Comment):local natrule &quot;NAT Loopback pppoe-out01&quot; #不可重複,多個的話 要改名:local newip:local oldip:if [/interface get [/interface find name=$iwan] running] do={ :set newip [/ip address get [/ip address find interface=$iwan] address] :set newip [:pick $newip 0 ([:len $newip] -3)] :set oldip [/ip firewall nat get [find comment=$natrule] dst-address] :if (!($newip=$oldip)) do={ /ip firewall nat set [/ip firewall nat find comment=$natrule] dst-address=$newip }} 把上述東西修改好後 塞進System-&gt;Scripts裡面 最後再去 System-&gt;Scheduler 裡面 把它扔去10秒跑一次吧 On Event裡面的 Loopback-PPPOE4 要改成 你在Scripts裡面給他的名字 參考資料关于NAT回流 - 内网使用DDNS域名访问内网服务器","link":"/2021/08/16/RouterOS-HairpinNAT/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/1987/01/01/hello-world/"},{"title":"hexo的最佳撰寫環境 Hexo+Typora+Github+jsDelivr","text":"為啥會有這篇?因為,初期在創作Blog時,踩了很多的坑… 最棘手的問題..大概就是…怎麼方便的把文字跟圖片放在一起… 部屬Blog到Vercel/Github Pages時,也不會碰到圖片失效的問題 又要白瞟jsDelivr CDN(省流量/速度快) 本篇是以 我的角度出發… 在最舒服+Cost Down的情況下, 因為我用的寫作環境是Typora 所以以下用Typora來介紹laaa 事前準備 一個可以被自己愛上的Hexo主題,與設定 Typora Github帳號 懂一咪咪的Git 操作步驟1. 下載Typora首先,要先去下載Typora,Mac/Windows/Linux都能用啦 打開之後,會長這樣 2.Github帳號前置準備1.生成Github Token準備好之後 在右上角點擊你的頭像旁的箭頭 打開選單 找到Settings 打開之後 點擊 Developer settings 後點選 Personal access tokens 並點 Generate new token 接下來設定Access Token的相關設定 Note: 可以隨意命名 Expiration: No expiration *建議啦 (不要外洩!!!!) Select Scopes: 勾Repo就好 接著往下滑 點Generate Token 這組就會是你的Token了 不要外洩!!! Github 創立一個新Repo點擊你頭像旁的那顆**+**號 選擇New repository 設定Repo相關訊息 Repository name: 自己取,只能是英文+數字 型別一定要選公開 不然jsDelivr會抓不到 最後點Create Repository Typora設定打開後,點擊檔案-&gt;偏好設定 圖片 依照圈起來的地方設定/點選 When Inset: Uploaded image Image Uploader: PicGo-Core (command line) 點選 Download or Upgrade 點選Open Config File 將下列Code Block 複製並貼上 並將 customUrl 的 TreeHD/myHexos 以及repo 的 TreeHD/myHexos 修改為自己的Github使用者名稱以及Repo token 則修改為在上方申請的Github Token 最後 點擊Test Uploader 123456789101112131415161718192021222324252627282930313233343536373839{ &quot;uploaded&quot;: [], &quot;picBed&quot;: { &quot;current&quot;: &quot;github&quot;, &quot;uploader&quot;: &quot;github&quot;, &quot;smms&quot;: { &quot;token&quot;: &quot;&quot; }, &quot;github&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;customUrl&quot;: &quot;https://cdn.jsdelivr.net/gh/TreeHD/myHexos@master&quot;, &quot;path&quot;: &quot;&quot;, &quot;repo&quot;: &quot;TreeHD/myHexos&quot;, &quot;token&quot;: &quot;LFIKSFGSYUIFGSIYUGDYSUDYS&quot; } }, &quot;settings&quot;: { &quot;shortKey&quot;: { &quot;picgo:upload&quot;: { &quot;enable&quot;: true, &quot;key&quot;: &quot;CommandOrControl+Shift+P&quot;, &quot;name&quot;: &quot;upload&quot;, &quot;label&quot;: &quot;快捷上传&quot; } }, &quot;server&quot;: { &quot;port&quot;: 36677, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;enable&quot;: true }, &quot;privacyEnsure&quot;: true, &quot;showUpdateTip&quot;: true, &quot;pasteStyle&quot;: &quot;markdown&quot; }, &quot;picgoPlugins&quot;: {}, &quot;debug&quot;: true, &quot;PICGO_ENV&quot;: &quot;GUI&quot;, &quot;needReload&quot;: false } 出現Successfully 就成功啦 開始創作直接將圖片在外面複製後(放到剪貼簿) 直接在Typora內貼上 就完成啦~ 後話這篇文章介紹的東西 大概是我這段時間..用的最順手的方式 前端也從原本放在我的OracleCloud小雞…移到了Vercel… Vercel可以跟Github掛勾 把Repo的更新 馬上部屬到Vercel 圖片透過Github+jsDelivr分發 基本可以說..除了域名錢外..沒啥開銷了😆","link":"/2021/08/19/hexo%E7%9A%84%E6%9C%80%E4%BD%B3%E6%92%B0%E5%AF%AB%E7%92%B0%E5%A2%83/"},{"title":"code-server 安裝 github copilot","text":"我平時很愛跑一些有的沒的專案在VPS上,尤其..那些支援網頁版酷酷的東西…講到今天的主角…code-server 他是一個類似Visual Studio Code的東西,只不過他是運作在網頁上的這意味著..你不管走到哪裡,有一個行動裝置能打開瀏覽器,你就可以開始Coding Life!Code-Server裝起來並不難,而且碰到問題,可以尋求社區解決 原本我認為我這樣就很滿足了…直到我遇見了Github Copilot這東西可以靠你一行註解/程式碼…幫你完成剩下的程式…堪稱作弊級別的存在 但是…當我裝上code-server後..卻出現了沒辦法登入Github的囧況 沒辦法登入Github意味著…我們沒辦使用作弊器-Github Copilot..連要直接將專案推上Github都會有困難,甚至不能使用 這時候..我上網找了一下資訊發現大家都有Code-server無法授權登入Github的狀況,並且有人提了解決的辦法首先,點擊登入Github的按鈕並將打開的網址複製下來，例如 1https://vscode-auth.github.com/authorize/?callbackUri=https://****.devcallback%253Fvscode-requestId%253Dd60a96c7-1740-4b66-8dd3-703516fd338b%2526vscode-scheme%253Dcode-oss%2526vscode-authority%253Dvscodegithub-authentication%2526vscode-path%253D%25252Fdid-authenticate&amp;scope=read:user&amp;state=d3d5cef3-e647-4a9d-a17d-226031610c66&amp;responseType=code&amp;authServer=https://github.com 這時,我們將state後面的 d3d5cef3-e647-4a9d-a17d-226031610c66 複製起來,修改成 1https://vscode-auth.github.com/authorize/?callbackUri=vscode://vscode.github-authentication/did-authenticate&amp;scope=repo&amp;state=d3d5cef3-e647-4a9d-a17d-226031610c66&amp;responseType=code 然後打開瀏覽器,將修改完成的網址貼上瀏覽器,即可正常授權 接下來將Your authorization token中的文字整串複製到完成! 接下來,記得重新登入一次Code-Server,確保所有東西正常運作(有時Copilot的接受條款不一定會跑出來,需要重新登入code-server即可) 參考資料 코드서버에서 코파일럿 사용하기","link":"/2022/01/20/Copilot/"}],"tags":[{"name":"RouterOS","slug":"RouterOS","link":"/tags/RouterOS/"},{"name":"ROS","slug":"ROS","link":"/tags/ROS/"},{"name":"網路","slug":"網路","link":"/tags/%E7%B6%B2%E8%B7%AF/"},{"name":"科技","slug":"科技","link":"/tags/%E7%A7%91%E6%8A%80/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"typora","slug":"typora","link":"/tags/typora/"},{"name":"PicGO","slug":"PicGO","link":"/tags/PicGO/"},{"name":"寫Blog","slug":"寫Blog","link":"/tags/%E5%AF%ABBlog/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"hexo圖片","slug":"hexo圖片","link":"/tags/hexo%E5%9C%96%E7%89%87/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Copilot","slug":"Copilot","link":"/tags/Copilot/"},{"name":"code-server","slug":"code-server","link":"/tags/code-server/"}],"categories":[]}